#include <iostream>
#include <string>
/*
* Function templates are a way to create a function that can work with many different types of data. Function template are not the real c++ code but a template that the compiler uses to generate the real code.
* The real C++ code generated by the compiler is called template instance. Templates avoid multiple overloads of same function.
* the template instance will be reusing the same code for different types of data. We as a programmer will not have to write the same code twice or thrice.
*/
template <typename T> // ! T here is placeholder. write templates as normal functions just change the type to T and that's it. You must use different type name for different types of data in the same function.
T maximum(T a, T b) // ! T a and T b are template parameters.
{
    return (a > b) ? a : b;
}

int main(){
    int a{10}, b{20};
    double e{10.5}, f{20.5};
    std::string c{"Hello"}, d{"World"};

    int result = maximum(e, f); // ! This is where compiler deduce that the function type to be generate is double. Here e,f are the template arguments.
    std::cout << result << std::endl;
}